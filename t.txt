import React, { useEffect, useState } from 'react';
import { View, Button, StyleSheet, TouchableOpacity, Image, Text } from 'react-native';
import DocumentPicker from 'react-native-document-picker';
import TrackPlayer, { Capability, State, usePlaybackState, useProgress } from 'react-native-track-player';
import ProgressBar from 'react-native-progress/Bar';

const AudioPicker = () => {
    const [audioFile, setAudioFile] = useState(null);

    const pickAudio = async () => {
        try {
            // if(audioFile){
            //     await TrackPlayer.remove(audioFile);
            // }
            if (audioFile) {
                await TrackPlayer.reset();
            }

            const result = await DocumentPicker.pick({
                type: [DocumentPicker.types.audio],
            });

            if (result) {
                setAudioFile(result);
                console.log("result is ", result);
            }
        } catch (err) {
            console.error('Error picking audio:', err);
        }
    };

    useEffect(() => {
        setupPlayer()
    }, [])

    const setupPlayer = async () => {
        try {
            await TrackPlayer.setupPlayer();
            // await TrackPlayer.setRepeatMode(RepeatMode.Track);
            await TrackPlayer.updateOptions({
                // Media controls capabilities
                capabilities: [
                    Capability.Play,
                    Capability.Pause,
                    Capability.SkipToNext,
                    Capability.SkipToPrevious,
                    Capability.Stop,
                ],

            });
        } catch (error) {
            console.log(error)
        }
    }
    const playbackState = usePlaybackState()

    const playAudio = async () => {
        if (audioFile) {
            //   await TrackPlayer.setupPlayer();
            console.log("audiofle", audioFile)
            // if (playbackState === State.Stopped) {
            //     await TrackPlayer.seekTo(0);
            // }
            try {
                await TrackPlayer.add({
                    id: 'customAudio',
                    url: audioFile[0].uri,
                    // url: require('./audio/theme.mp3'),
                    title: 'Custom Audio',
                    artist: 'User',
                });
                console.log("trackplayer is ", TrackPlayer)
                console.log("State is ", State, playbackState)
                console.log(audioFile[0].uri)

                await TrackPlayer.play();
            } catch (error) {
                console.log("error", error)
            }
            console.log("State after ", playbackState)
        }
    };
    const removeFun = async () => {
        // await TrackPlayer.remove({
        //     id: 'customAudio',
        //     url: audioFile[0].uri,
        //     // url: require('./audio/theme.mp3'),
        //     title: 'Custom Audio',
        //     artist: 'User',
        // });
        await TrackPlayer.reset();
    }

    const pauseAudio = async () => {
        if (playbackState === State.Playing) {
            await TrackPlayer.pause();
        }
    }
    const togglePlay = async () => {
        // if (playbackState === State.Paused || playbackState === State.Stopped) {
        if (playbackState === State.Playing) {
            await TrackPlayer.pause();
        }
        else if (playbackState == State.Stopped) {
            await TrackPlayer.seekTo(0);
        }
        else {
            playAudio();
        }
    };
    // }
    const removeCurrentTrack = async () => {
        setAudioFile(null);
        await TrackPlayer.reset();
    };
    const progress = useProgress();
    const progressValue =(progress.position == 0 && progress.duration == 0) ? 0 : progress.position / progress.duration;
    const progressValue2 = progressValue == NaN ? progress.position : progressValue.toFixed(2);
    let bufferValue = progress.buffered;
    const logQueuedTracks = async () => {
        const queue = await TrackPlayer.getQueue();
        console.log("Queued Tracks:", queue);
    };

    const getState = async () => {
        console.log("playback state is ", playbackState)
        console.log("audioFIle ", audioFile)
    }

    return (
        console.log(progress, progressValue,progressValue2),
        <View style={{ marginTop: 100 }}>
            <View >
                <Button title="Pick Audio" color={'green'} onPress={pickAudio} />

                <Button title="Play Audio" color={'grey'} onPress={playAudio} />
                <Button title="Pause" color={'blue'} onPress={pauseAudio} />
                <Button title='logQueuedTracks' color={'pink'} onPress={logQueuedTracks}></Button>
                <Button title="Remove Current Track" color={'red'} onPress={removeCurrentTrack} />
                <Button title='get State' color={'brown'} onPress={getState}></Button>
                <Button title='removeFun' color={'skyblue'} onPress={removeFun}></Button>

            </View>



            {/* <ProgressBar
                progress={progressValue2}
                buffered={progress.buffered}
                width={null} // This will make the progress bar take the full width of its container
                height={10} // Adjust the height as needed
                color="#007BFF" // Set the progress bar color
            // borderColor="transparent"

            /> */}


            <View style={styles.container}>
                <TouchableOpacity style={styles.selectButton} onPress={pickAudio}>
                    <Image
                        source={require('./images/upload.png')}
                        style={styles.playPauseIcon}
                    />
                    <Text style={styles.selectButtonText}>Select Audio</Text>
                    <Text style={{ color: 'grey', fontSize: 12 }}>choose 1 file </Text>
                </TouchableOpacity>



            </View>
            {/* <View> */}
            {audioFile ? (
                <View style={styles.container2}>
                    <View style={styles.audioControls}>
                        <TouchableOpacity
                            style={styles.playButton}
                            onPress={togglePlay}
                        >
                            <Image
                                source={playbackState === State.Playing ? require('./images/pause.png') : require('./images/play.png')}
                                style={styles.playPauseIcon}
                            />
                        </TouchableOpacity>

                    </View>
                    <View style={{}}>
                        <Text style={styles.filename}>{audioFile[0].name}</Text>
                    </View>
                    <TouchableOpacity
                        style={styles.removeButton}
                        onPress={removeCurrentTrack}
                    >
                        {/* <Text style={styles.removeButtonText}>Remove</Text> */}
                        <Image
                            source={require('./images/close.png')}
                            style={styles.removeButtonText}
                        />

                    </TouchableOpacity>
                </View>
            ) : null}
            {/* </View> */}
        </View>




    );
};

const styles = StyleSheet.create({
    container: {
        height: 180,
        width: null,

        borderColor: 'black',
        borderWidth: 2,
        borderRadius: 5,
        backgroundColor: '#fff',
        // padding
        marginHorizontal: 10,
        marginBottom: 10,
        marginTop: 100,
        alignItems: 'center',
        justifyContent: 'center'
    },
    container2: {
        height: 50,
        width: null,
        marginHorizontal: 10,
        marginBottom: 100,
        borderColor: 'black',
        borderWidth: 2,
        // borderRadius: 5,
        backgroundColor: '#fff',
        // alignItems: 'center',
        justifyContent: 'flex-start',
        display: 'flex',
        flexDirection: 'row',
        // alignContent : 'flex-start'

    },
    filename: {
        color: 'grey',
        fontSize: 16,
        // width : '60%',
        // alignSelf : 'center'
        marginVertical: 10,
    },
    selectButton: {
        // backgroundColor: 'green',
        // color : 'black',
        padding: 10,
        borderRadius: 5,
        alignItems: 'center',
        justifyContent: 'center',
        marginBottom: 10,
    },
    selectButtonText: {
        color: 'grey',
        fontSize: 16,
        fontWeight: 'bold'
    },
    audioControls: {
        // display : 'flex',
        // flexDirection: 'row',
        // height: 60,
        // width: 'auto',
        // marginBottom: -5,
        // marginHorizontal : 10,
        // alignItems: 'flex-start',
    },
    playButton: {
        backgroundColor: 'grey',
        padding: 10,
        // borderRadius: 5,
        marginRight: 10,
        height: 46,
        alignSelf: 'flex-start',
    },
    removeButton: {
        backgroundColor: '#fff',
        padding: 10,
        borderRadius: 5,
        // alignSelf : 'flex-end',
        marginLeft: 'auto'
        // marginRight : 10,
    },
    removeButtonText: {
        // color: 'grey',
        width: 24,
        height: 24,
    },
    playPauseIcon: {
        width: 24,
        height: 24,
        // tintColor: 'grey',
    },
});

export default AudioPicker;
